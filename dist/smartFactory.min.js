!function e(t,r,n){function o(a,c){if(!r[a]){if(!t[a]){var u="function"==typeof require&&require;if(!c&&u)return u(a,!0);if(i)return i(a,!0);throw new Error("Cannot find module '"+a+"'")}var f=r[a]={exports:{}};t[a][0].call(f.exports,function(e){var r=t[a][1][e];return o(r?r:e)},f,f.exports,e,t,r,n)}return r[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){var n,o=e("rosie").Factory,i=e("faker"),a=e("angular");!function(e){function t(e){return function(t){t.__rosieFactoryName__=e,t.factory={list:function(e,r){return o.buildList(t.__rosieFactoryName__,e,r)},build:function(e){return o.build(t.__rosieFactoryName__,e)}}}}e.config=t;var r=function(){function e(){}return e.findName=function(){return this.faker.name.findName()},e.faker=i,e}();e.FakerWrapper=r;var n=function(){function e(){}return e.define=function(t,r){var n=new e;return n.wrappedFactory=this.factory.define(t,r),n},e.build=function(e,t,r){return this.factory.build(e,t,r)},e.buildList=function(e,t,r,n){return this.factory.build(e,t,r,n)},e.attributes=function(e,t){return this.factory.attributes(e,t)},e.options=function(e){return this.factory.options(e)},e.extend=function(e){return this.factory.extend(e)},e["for"]=function(e){if(e.__rosieFactoryName__&&e.factory)return e.factory;throw new Error("no factory registered for "+e.toString()+" please check!")},e.prototype.attr=function(e,t,r){return this.wrappedFactory=t&&t.constructor===Array?this.wrappedFactory.attr(e,t,r):this.wrappedFactory.attr(e,[],t),this},e.prototype.sequence=function(e,t,r){return this.wrappedFactory=void 0===t&&void 0===r?this.wrappedFactory.sequence(e):void 0===t?this.wrappedFactory.sequence(e,[],r||null):this.wrappedFactory.sequence(e,t,r||null),this},e.factory=o,e}();e.FactoryWrapper=n;var a=function(){function e(){return n}return e}();e.Service=a}(n||(n={})),"undefined"!=typeof a?a.module("smartFactory",[]).service("Factory",n.Service):console&&console.error&&("undefined"==typeof a&&console.error("smartFactory not registered beacuse angular is missing"),"undefined"==typeof i&&console.error("smartFactory not registered beacuse faker.js is missing"),"undefined"==typeof o&&console.error("smartFactory not registered beacuse angular rosie is missing")),t.exports=n},{}],2:[function(e,t,r){var n=this&&this.__decorate||function(e,t,r,n){if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)return Reflect.decorate(e,t,r,n);switch(arguments.length){case 2:return e.reduceRight(function(e,t){return t&&t(e)||e},t);case 3:return e.reduceRight(function(e,n){return void(n&&n(t,r))},void 0);case 4:return e.reduceRight(function(e,n){return n&&n(t,r,e)||e},n)}},o=this&&this.__metadata||function(e,t){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(e,t):void 0},i=e("./factories"),a=e("angular"),c=e("angular-mocks/ngMock");console.log(c),describe("smartFactory",function(){var e,t={id:1,name:"Man Withname 1"};beforeEach(a.mock.module("smartFactory")),beforeEach(inject(function(t){e=t,e.define("user").sequence("id").attr("name",["id"],function(e){return"Man Withname "+e})}));var r=function(){function e(){}return e=n([i.config("user"),o("design:paramtypes",[])],e)}();it("defines factories throung Factory without dependencies argument",function(){e.define("usersimple").attr("name","John"),expect(e.build("usersimple")).toEqual({name:"John"})}),it("defines Factory",function(){expect(e.build("user")).toEqual(t)}),it("has factory exposed on decorated class",function(){expect(e["for"](r).build()).toEqual(t)})})},{"./factories":1}]},{},[2]);
//# sourceMappingURL=data:application/json;base64,